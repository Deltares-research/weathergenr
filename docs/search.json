[{"path":"/articles/Getting_started.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting started","text":"vignette introduces basics multivariable, multigrid stochastic daily weather series generation process weathergenr. package consists series R scripts function wrappers built upon work Steinscheineder et al (2013). implementation works directly gridded hydrometeorological datasets (e.g., ERA5) netcdf files provide automatization underlying statistical processes. Recoded functions also provide significant speed improvements cases. tutorial, ’ll first learn easily generate new stochastic weather realizations specific geographic area. Next, ’ll learn impose climate changes generated stochastic weather realizations, example, changes monthly means variance temperature precipitation. Finally, see simple illustration input data “climate stress test” can generated.","code":""},{"path":"/articles/Getting_started.html","id":"installation-and-setup","dir":"Articles","previous_headings":"","what":"Installation and setup","title":"Getting started","text":"latest version weathergenr package can installed github loaded environment:","code":"#>             checking for file 'C:\\Users\\taner\\AppData\\Local\\Temp\\Rtmpqeptpf\\remotesb313c49355c9d\\Deltares-weathergenr-f518728/DESCRIPTION' ...       checking for file 'C:\\Users\\taner\\AppData\\Local\\Temp\\Rtmpqeptpf\\remotesb313c49355c9d\\Deltares-weathergenr-f518728/DESCRIPTION' ...      [32mv [39m   [38;5;247mchecking for file 'C:\\Users\\taner\\AppData\\Local\\Temp\\Rtmpqeptpf\\remotesb313c49355c9d\\Deltares-weathergenr-f518728/DESCRIPTION' [39m [36m [36m (564ms) [36m [39m #>            [38;5;247m- [39m [38;5;247m   [39m [38;5;247mpreparing 'weathergenr': [39m [36m [39m #>    checking DESCRIPTION meta-information ...       checking DESCRIPTION meta-information ...      [32mv [39m   [38;5;247mchecking DESCRIPTION meta-information [39m [36m [39m #>            [38;5;247m- [39m [38;5;247m   [39m [38;5;247mchecking for LF line-endings in source and make files and shell scripts [39m [36m [39m #>            [38;5;247m- [39m [38;5;247m   [39m [38;5;247mchecking for empty or unneeded directories [39m [36m [39m #>        Omitted 'LazyData' from DESCRIPTION #>            [38;5;247m- [39m [38;5;247m   [39m [38;5;247mbuilding 'weathergenr_0.0.2.tar.gz' [39m [36m [39m #>         #>"},{"path":[]},{"path":"/articles/Getting_started.html","id":"reading-in-weather-data-from-netcdf","dir":"Articles","previous_headings":"Simple examples","what":"Reading in weather data from netcdf","title":"Getting started","text":"weather generator takes gridded weather data previously cropped geographic area, provided netcdf file. Thus, first step read-weather data associated spatial information external file. exercise, use sample netcdf file comes package. file provides long-term gridded metereological data Ntoum basin, Gabon. readNetcdf() wrapper several ncdf4 functions extract metereological data netcdf files associated spatial coordinates, dates, dimensions (time, x, y) variable attributes. output object stores various information netcdf file: Metereological data stored list object via data element. list represents different grid cell “tidy” format, .e., observations rows metereological variables columns: Information grids can accessed via grid element. also provided data frame columns grid index followed x y dimension indices x y coordinate values: Finally, date series associated data can accessed date element:","code":"ncfile <- system.file(\"extdata\", \"ntoum_era5_data.nc\", package = \"weathergenr\") ncdata <- readNetcdf(ncfile) names(ncdata) #> [1] \"data\"       \"grid\"       \"date\"       \"dimensions\" \"attributes\" # Display climate data for the first gridcell ncdata$data[[1]] #> # A tibble: 7,671 x 7 #>    press_msl   kin temp_min temp_max  temp  kout precip #>        <dbl> <dbl>    <dbl>    <dbl> <dbl> <dbl>  <dbl> #>  1     1008.  174.     24.4     28.1  25.9  410.  9.12  #>  2     1008.  162.     23.7     28.1  24.9  410. 15.6   #>  3     1008.  201.     23.6     27.9  25.6  411.  4.84  #>  4     1008.  177.     25.0     28.3  26.1  411.  5.20  #>  5     1007.  218.     24.6     28.1  26.1  411.  1.54  #>  6     1007.  199.     25.0     28.2  26.3  411.  8.35  #>  7     1008.  195.     24.3     28.3  25.9  412. 14.4   #>  8     1009.  158.     24.6     26.5  25.4  412. 11.4   #>  9     1010.  143.     24.1     27.1  25.1  413.  9.15  #> 10     1009.  220.     23.9     28.6  26.1  413.  0.810 #> # ... with 7,661 more rows # Display grid information ncdata$grid #> # A tibble: 6 x 5 #>      id  xind  yind     x     y #>   <int> <int> <dbl> <dbl> <dbl> #> 1     1     1     1  9.5   0.5  #> 2     2     2     1  9.75  0.5  #> 3     3     3     1 10     0.5  #> 4     4     1     2  9.5   0.25 #> 5     5     2     2  9.75  0.25 #> 6     6     3     2 10     0.25 # Display start and ending values date vector head(ncdata$date) #> [1] \"2000-01-01\" \"2000-01-02\" \"2000-01-03\" \"2000-01-04\" \"2000-01-05\" #> [6] \"2000-01-06\" tail(ncdata$date) #> [1] \"2020-12-26\" \"2020-12-27\" \"2020-12-28\" \"2020-12-29\" \"2020-12-30\" #> [6] \"2020-12-31\""},{"path":"/articles/Getting_started.html","id":"generate-stochastic-weather-realizations","dir":"Articles","previous_headings":"Simple examples","what":"Generate stochastic weather realizations","title":"Getting started","text":"section, introduce procedure obtain new weather sequences historical weather record via generateWeatherSeries() function. function serves wrapper arround number statistical procedures including wavelet autoregressive model (WARM) coupled Markov chain knn resampling scheme based Steinschneider Brown (2013). First, lets specify output path results variables include dataset: GenerateWeatherSeries() function includes large set essential non-essential parameters control weather generation process. Essential parameters include: weather.data, weather.grid, weather.date variable.names specify attributes input metereological data, realization.num set desired number new weather realizations, output.path: output list, first element data frame resampled dates new stochastic realization date vector new (generated) weather data.","code":"# Set path to store weather generator results output_path <- \"C:/testrun/\" variables <- c(\"precip\", \"temp\", \"temp_min\", \"temp_max\") realization_num <- 3 stochastic_weather <- generateWeatherSeries(      weather.data = ncdata$data,      weather.grid = ncdata$grid,      weather.date = ncdata$date,      variable.names = variables,      variable.labels = variables,      variable.units = NULL,      sim.year.num = 20,      sim.year.start = 2020,      month.start = 1,      realization.num = realization_num,      warm.variable = \"precip\",      warm.signif.level = 0.90,      warm.sample.num = 10000,      warm.subset.criteria = NULL,      knn.sample.num = 120,      mc.wet.quantile= 0.2,      mc.extreme.quantile = 0.8,      evaluate.model = FALSE,      evaluate.grid.num = 20,      output.path = output_path,      seed = 123) # Resampled dates stochastic_weather$resampled #> # A tibble: 7,300 x 3 #>    rlz_1      rlz_2      rlz_3      #>    <date>     <date>     <date>     #>  1 2001-01-01 2001-01-01 2001-01-01 #>  2 2000-01-01 2006-01-02 2006-01-01 #>  3 2012-01-02 2006-01-01 2006-01-02 #>  4 2012-01-05 2014-01-06 2006-01-01 #>  5 2000-01-06 2014-01-06 2006-01-02 #>  6 2002-01-07 2018-01-04 2016-01-09 #>  7 2019-01-06 2008-01-04 2001-01-10 #>  8 2002-01-06 2016-01-09 2016-01-09 #>  9 2003-01-06 2013-01-08 2013-01-11 #> 10 2002-01-13 2016-01-10 2001-01-07 #> # ... with 7,290 more rows  # Date vector head(stochastic_weather$dates) #> [1] \"2021-01-01\" \"2021-01-02\" \"2021-01-03\" \"2021-01-04\" \"2021-01-05\" #> [6] \"2021-01-06\" tail(stochastic_weather$dates) #> [1] \"2040-12-26\" \"2040-12-27\" \"2040-12-28\" \"2040-12-29\" \"2040-12-30\" #> [6] \"2040-12-31\""},{"path":"/articles/Getting_started.html","id":"apply-climate-change-realizations","dir":"Articles","previous_headings":"Simple examples","what":"Apply climate change realizations","title":"Getting started","text":"Delta factors can imposed historical stochastically generated weather data reflect plausible changes climate statistics. Currently, possible shift mean variance precipitation mean temperature. Preciptation changes specified ratios, value 1.0 indicates change given calendar month. Temperature changes specified increases (decreases) degree celsius given month. Finally can save generated weather series back netcdf file:","code":"# Temperature changes Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec delta_temp_mean <- c(3.0, 3.2, 3.4, 4.0, 4.1, 4.4, 5.0, 3.5, 3.3, 2.9, 2.8, 2.7)  # Precipitation changes   Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec delta_precip_mean     <- c(0.7, 0.7, 0.8, 0.8, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7) delta_precip_variance <- c(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)  # Select first realization day_order <- match(stochastic_weather$resampled[[1]], ncdata$date)  # Obtain stochastic series by re-ordering historical data stochastic_rlz <- lapply(ncdata$data, function(x) x[day_order,])  # Apply climate changes to climate data stochastic2 <- imposeClimateChanges(    climate.data = stochastic_rlz,    climate.grid = ncdata$grid,    sim.dates = stochastic_weather$dates,    change.factor.precip.mean = delta_precip_mean,    change.factor.precip.variance = delta_precip_variance,    change.factor.temp.mean = delta_temp_mean,    change.type.temp = \"transient\",    change.type.precip = \"transient\") # Save to netcdf file writeNetcdf(     data = stochastic2,     coord.grid = ncdata$grid,     output.path = output_path,     origin.date =  stochastic_weather$dates[1],     calendar.type = \"noleap\",     nc.template.file = ncfile,     nc.compression = 4,     nc.spatial.ref = \"spatial_ref\",     nc.file.prefix = \"clim\",     nc.file.suffix = NULL)"},{"path":"/articles/Getting_started.html","id":"climate-stress-testing","dir":"Articles","previous_headings":"","what":"Climate Stress Testing","title":"Getting started","text":"Metereological input climate stress test can generated obtaining wide range plausible weather conditions. tutorial, generate 6 climate change scenarios combining 3 monthly precipitation changes 2 monthly temperature changes. apply scenarios 3 natural variability realizations, resulting total 6 x 3 = 18 scenarios.","code":""},{"path":"/articles/Getting_started.html","id":"defining-the-stress-testing-matrix","dir":"Articles","previous_headings":"Climate Stress Testing","what":"Defining the stress testing matrix","title":"Getting started","text":"first step define data table store information regarding scenarios, e.g., weather statistics changed. , first define bandwith range (e.g., minimum maximum values) define delta factors climate statistic perturbed. example , vary three statistics: mean precipitation, variance precipitation, mean temperature. Now lets create scenario matrix using bandwiths incremental step sizes specified variable # Write stress test matrices file (optional) Finally, lets generate stress test input data","code":"# Temp mean changes Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec delta_temp_mean_min <- c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) delta_temp_mean_max <- c(3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0)  # Precip mean changes   Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec delta_precip_mean_min <- c(0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7) delta_precip_mean_max <- c(1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3)  # Precip variance changes   Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec delta_precip_variance_min <- c(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) delta_precip_variance_max <- c(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)  # Number of incremental step changes for precip and temp variables precip_step_num <- 3 temp_step_num <- 2 precip_mean_steps <- sapply(1:12, function(m)          seq(delta_precip_mean_min[m], delta_precip_mean_max[m],              length.out = precip_step_num))  precip_variance_steps <- sapply(1:12, function(m)          seq(delta_precip_variance_min[m], delta_precip_variance_max[m],              length.out = precip_step_num))  temp_mean_steps <- sapply(1:12, function(m)          seq(delta_temp_mean_min[m], delta_temp_mean_max[m],              length.out = temp_step_num))   df1 <- as.data.frame(precip_mean_steps) %>% mutate(level = 1:n(),    variable = \"precip_mean\", .before = 1)  df2 <- as.data.frame(precip_variance_steps) %>% mutate(level = 1:n(),    variable = \"precip_variance\", .before = 1)  df3 <- as.data.frame(temp_mean_steps) %>% mutate(level = 1:n(),    variable = \"temp_mean\", .before = 1)  df <- bind_rows(df1, df2, df3) %>% gather(month, value, V1:V12) %>%    mutate(month = factor(month, levels = paste0(\"V\",1:12), labels = 1:12))   p <- ggplot2::ggplot(df, aes(x = month, y = value, group = level, color = level)) +    facet_wrap(. ~ variable, scales = \"free_y\", ncol = 2) +    geom_line() +    labs(x=\"month\", y = \"delta factor\") +    scale_color_distiller(palette = \"Set1\") +    guides(color = \"none\")   p # Stress test matrix  strtest_matrix <- tidyr::expand_grid(stoc_ind = 1:realization_num,    precip_ind = 1:precip_step_num, temp_ind = 1:temp_step_num)   # Total number of scenarios  smax <- nrow(strtest_matrix)   # Stress test delta factors for each variable/climate statistic  strtest_matrix_precip_mean <- precip_mean_steps[strtest_matrix$precip_ind, ]  strtest_matrix_precip_variance <- precip_variance_steps[strtest_matrix$precip_ind, ]  strtest_matrix_temp_mean <- temp_mean_steps[strtest_matrix$temp_ind, ] write.csv(strtest_matrix,    paste0(output_path, \"strtest_matrix.csv\"), row.names = FALSE)  write.csv(strtest_matrix_precip_mean,    paste0(output_path, \"strtest_matrix_precip_mean.csv\"), row.names = FALSE)  write.csv(strtest_matrix_precip_variance,    paste0(output_path, \"strtest_matrix_precip_variance.csv\"), row.names = FALSE)  write.csv(strtest_matrix_temp_mean,    paste0(output_path, \"strtest_matrix_temp_mean.csv\"), row.names = FALSE) # Read-in resampled dates & date series (from csv files included with the package)  resampled_dates <- read.csv(system.file(\"extdata\", \"resampled_dates.csv\", package = \"weathergenr\"),    colClasses = \"Date\")  sim_dates <- read.csv(system.file(\"extdata\", \"sim_dates.csv\", package = \"weathergenr\"),    colClasses = \"Date\")[[1]]   # Use results from generateWeatherSeries function output  # resampled_dates <- stochastic_weather$resampled  # sim_dates <- stochastic_weather$dates  # progress bar (optional) pb = txtProgressBar(min = 1, max = smax, initial = 0, style = 3)  for (s in 1:smax) {     setTxtProgressBar(pb,s)     # Find the current scenario indices for the stochastic realization and delta factors    stoc_ind <- strtest_matrix$stoc_ind[s]     # Obtain stochastic series by re-ordering historical data    day_order <- match(resampled_dates[[stoc_ind]], ncdata$date)    rlz_historical <- lapply(ncdata$data, function(x) x[day_order,])     # Apply climate changes to climate data    rlz_future <- imposeClimateChanges(      climate.data = rlz_historical,      climate.grid = ncdata$grid,      sim.dates = sim_dates,      change.factor.precip.mean = strtest_matrix_precip_mean[s,],      change.factor.precip.variance = strtest_matrix_precip_variance[s,],      change.factor.temp.mean = strtest_matrix_temp_mean[s,],      change.type.temp = \"transient\",      change.type.precip = \"transient\")       # Save to netcdf file      writeNetcdf(        data = rlz_future,        coord.grid = ncdata$grid,        output.path = output_path,        origin.date =  stochastic_weather$dates[1],        calendar.type = \"noleap\",        nc.template.file = ncfile,        nc.compression = 4,        nc.spatial.ref = \"spatial_ref\",        nc.file.prefix = \"climx\",        nc.file.suffix = s)  }  close(pb)"},{"path":"/articles/Getting_started.html","id":"running-weather-generator-from-python","dir":"Articles","previous_headings":"","what":"Running weather generator from python","title":"Getting started","text":"progress Prerequisites: 1. Install latest version R via https://mirror.lyrahosting.com/CRAN/ 2. Create new python environment packages rpy2, r-base, r-essentials, pandas, numpy2 First set PATH variables correctly","code":"import os os.environ['PATH'] = 'C:/Program Files/R/R-4.1.2/bin/x64' + os.pathsep + os.environ.get('PATH', '') os.environ['PYTHONHOME'] = 'C:/Users/taner/Anaconda3/envs/wegentest' os.environ['PYTHONPATH'] = 'C:/Users/taner/Anaconda3/envs/wegentest/Lib/site-packages'  # Location of R executable os.environ['R_HOME'] = 'C:/Program Files/R/R-4.1.2'  # Location of R packages installed os.environ['R_USER'] = 'C:/Users/taner/Anaconda3/envs/wegentest/Lib/site-packages/rpy2'  # Check if variables are correctly defined for rpy2 import rpy2.situation for row in rpy2.situation.iter_info():     print(row) #Import necessary packages import rpy2.robjects as robjects from rpy2.robjects.packages import importr  # This is needed for conversion between R and Python syntax d = {'package.dependencies': 'package_dot_dependencies',      'package_dependencies': 'package_uscore_dependencies'}  # Load core packages base = importr('base') utils = importr('utils') utils.chooseCRANmirror(ind=1) # select the first mirror in the list devtools = utils.install_packages('devtools') devtools = importr('devtools', robject_translations = d)  # Install weathergenr from Github master branch weathergenr = devtools.install_github(\"tanerumit/weathergenr\") weathergenr = importr('weathergenr', robject_translations = d) # Load netcdf file ncfile = base.system_file(\"extdata\", \"ntoum_era5_data.nc\", package = \"weathergenr\") ncdata = weathergenr.readNetcdf(ncfile)  # Set path to store weather generator results output_path = \"C:/testrun/\" variables = base.c(\"precip\", \"temp\", \"temp_min\", \"temp_max\") realization_num = 3  stochastic_weather = weathergenr.generateWeatherSeries(      weather_data = ncdata[0],      weather_grid = ncdata[1],      weather_date = ncdata[2],      variable_names = variables,      output_path = output_path,      month_start = 1,      realization_num = realization_num,      warm_variable = \"precip\",      warm_signif_level = 0.90,      warm_sample_num = 5000,      knn_sample_num = 100,      evaluate_model = False,      evaluate_grid_num = 20,      mc_wet_threshold = 0.2,      mc_extreme_quantile = 0.8,      seed = 100)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mehmet Umit Taner. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Taner MU (2022). weathergenr: Gridded semi-parametric weather generator. R package version 0.0.2.","code":"@Manual{,   title = {weathergenr: Gridded semi-parametric weather generator},   author = {Mehmet Umit Taner},   year = {2022},   note = {R package version 0.0.2}, }"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Gridded semi-parametric weather generator","text":"Gridwegen simplified, scalable implementation semi-parametric stochastic weather generator developed Steinscheneider Brown (2013).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gridded semi-parametric weather generator","text":"development version package can installed github:","code":"devtools::install_github(\"Deltares/weathergenr\")"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Gridded semi-parametric weather generator","text":"Tutorial (progress): https://github.com/Deltares/weathergenr/blob/master/vignettes/Tutorial.html","code":""},{"path":"/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Gridded semi-parametric weather generator","text":"Copyright (c) 2019, Deltares Licensed MIT License. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Deltares Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/calculateSpellLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Spell Length — calculateSpellLength","title":"Calculate Spell Length — calculateSpellLength","text":"Calculate Spell Length","code":""},{"path":"/reference/calculateSpellLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Spell Length — calculateSpellLength","text":"","code":"calculateSpellLength(x, threshold = 0, below = TRUE)"},{"path":"/reference/calculateSpellLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Spell Length — calculateSpellLength","text":"x placeholder threshold placeholder placeholder","code":""},{"path":[]},{"path":"/reference/evaluateWegen.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to assess the weather generator skill — evaluateWegen","title":"Function to assess the weather generator skill — evaluateWegen","text":"Function assess weather generator skill","code":""},{"path":"/reference/evaluateWegen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to assess the weather generator skill — evaluateWegen","text":"","code":"evaluateWegen(   daily.sim = NULL,   daily.obs = NULL,   output.path = NULL,   variables = NULL,   variable.labels = NULL,   variable.units = NULL,   realization.num = NULL )"},{"path":"/reference/evaluateWegen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to assess the weather generator skill — evaluateWegen","text":"daily.sim matrix daily time-series weather variables daily.obs vector daily time-series observed weather series output.path character string define path resulting netcdf file. variables vector object specifying names weather variables. variable.labels vector object specifying names weather variable labels. variable.units vector object specifying names weather variable units. realization.num Placeholder","code":""},{"path":[]},{"path":"/reference/generateWeatherSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate gridded weather function — generateWeatherSeries","title":"Simulate gridded weather function — generateWeatherSeries","text":"Description goes ....","code":""},{"path":"/reference/generateWeatherSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate gridded weather function — generateWeatherSeries","text":"","code":"generateWeatherSeries(   weather.data = NULL,   weather.grid = NULL,   weather.date = NULL,   variable.names = NULL,   variable.labels = NULL,   variable.units = NULL,   sim.year.num = NULL,   sim.year.start = 2020,   month.start = 1,   realization.num = 5,   warm.variable = \"precip\",   warm.signif.level = 0.9,   warm.sample.num = 5000,   warm.subset.criteria = NULL,   knn.sample.num = 100,   mc.wet.threshold = 0.3,   mc.extreme.quantile = 0.8,   evaluate.model = FALSE,   evaluate.grid.num = 20,   output.path = getwd(),   seed = NULL )"},{"path":"/reference/generateWeatherSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate gridded weather function — generateWeatherSeries","text":"weather.data list data frames daily weather observations per grid cell. data frame, columns weather variables rows daily values. weather.grid Data frame grid cells. grid cell assigned id starting 1, x y coordinate index value, x y coordinates. weather.date placeholder variable.names vector names variables included weather generator variable.labels vector labels weather variables (optional). values provided, labels names variable.units vector units weather variables (optional). values provided, blank vector used. sim.year.num numeric value indicating desired total number years simulated weather realizations sim.year.start numeric value indicating starting year generated time-series month.start first month year (default value 1). Use value 1 water-year based analyses realization.num number natural variability realizations generated. warm.variable name variable wavelet autoregressive mode. Default value precipitation variable. warm.signif.level significance level warm model. warm.sample.num number annual sequeces generated warm model warm.subset.criteria placeholder knn.sample.num number knn years sampled mc.wet.threshold placeholder mc.extreme.quantile placeholder evaluate.model logical value indicating wether save model evaluation plots evaluate.grid.num Number grid cells sampled evaluation plots output.path output path weather generator results (string) seed placeholder","code":""},{"path":[]},{"path":"/reference/getPI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate markov chain probobabilities — getPI","title":"Calculate markov chain probobabilities — getPI","text":"Calculate markov chain probobabilities","code":""},{"path":"/reference/getPI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate markov chain probobabilities — getPI","text":"","code":"getPI(p00, p01, p02, p10, p11, p12, p20, p21, p22)"},{"path":"/reference/getPI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate markov chain probobabilities — getPI","text":"p00 placeholder p01 placeholder p02 placeholder p10 placeholder p11 placeholder p12 placeholder p20 placeholder p21 placeholder p22 placeholder","code":""},{"path":[]},{"path":"/reference/getWaterYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate water years from a date series — getWaterYear","title":"Calculate water years from a date series — getWaterYear","text":"Calculate water years date series","code":""},{"path":"/reference/getWaterYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate water years from a date series — getWaterYear","text":"","code":"getWaterYear(date = NULL, water.year.first.month = 1)"},{"path":"/reference/getWaterYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate water years from a date series — getWaterYear","text":"date vector values class date object water.year.first.month index first month water year, e.g., water year starts June, 6.","code":""},{"path":"/reference/getWaterYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate water years from a date series — getWaterYear","text":"vector water years","code":""},{"path":"/reference/hargreavesPet.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential evapotranspiration (PET) by hargreaves method — hargreavesPet","title":"Potential evapotranspiration (PET) by hargreaves method — hargreavesPet","text":"http://www.civil.uwaterloo.ca/watflood/manual/02_03_2.htm","code":""},{"path":"/reference/hargreavesPet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential evapotranspiration (PET) by hargreaves method — hargreavesPet","text":"","code":"hargreavesPet(months, temp, tdiff, lat)"},{"path":"/reference/hargreavesPet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential evapotranspiration (PET) by hargreaves method — hargreavesPet","text":"months completed... temp completed... tdiff completed... lat completed...","code":""},{"path":"/reference/hargreavesPet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Potential evapotranspiration (PET) by hargreaves method — hargreavesPet","text":"output vector PET values","code":""},{"path":"/reference/imposeClimateChanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Perturb weather realizations — imposeClimateChanges","title":"Perturb weather realizations — imposeClimateChanges","text":"Perturb weather realizations","code":""},{"path":"/reference/imposeClimateChanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perturb weather realizations — imposeClimateChanges","text":"","code":"imposeClimateChanges(   climate.data = NULL,   climate.grid = NULL,   sim.dates = NULL,   change.factor.precip.mean = NULL,   change.factor.precip.variance = NULL,   change.factor.temp.mean = NULL,   change.type.temp = \"transient\",   change.type.precip = \"transient\",   calculate.pet = TRUE )"},{"path":"/reference/imposeClimateChanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perturb weather realizations — imposeClimateChanges","text":"climate.data placeholder climate.grid placeholder sim.dates placeholder change.factor.precip.mean placeholder change.factor.precip.variance placeholder change.factor.temp.mean placeholder change.type.temp placeholder change.type.precip placeholder calculate.pet placeholder","code":""},{"path":[]},{"path":"/reference/knnAnnual.html","id":null,"dir":"Reference","previous_headings":"","what":"This KNN function generates 100 years..... — knnAnnual","title":"This KNN function generates 100 years..... — knnAnnual","text":"KNN function generates 100 years.....","code":""},{"path":"/reference/knnAnnual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This KNN function generates 100 years..... — knnAnnual","text":"","code":"knnAnnual(   sim_annual_prcp = NULL,   ANNUAL_PRCP = NULL,   WATER_YEAR_A = NULL,   kk = NULL,   k1 = NULL,   y = NULL,   y_sample_size = 50,   seed = NULL )"},{"path":"/reference/knnAnnual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This KNN function generates 100 years..... — knnAnnual","text":"sim_annual_prcp placeholder ANNUAL_PRCP placeholder WATER_YEAR_A placeholder kk placeholder k1 placeholder y placeholder y_sample_size placeholder","code":""},{"path":[]},{"path":"/reference/knnDaily.html","id":null,"dir":"Reference","previous_headings":"","what":"KNN daily sampling — knnDaily","title":"KNN daily sampling — knnDaily","text":"KNN daily sampling","code":""},{"path":"/reference/knnDaily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KNN daily sampling — knnDaily","text":"","code":"knnDaily(   cur_sim_PRCP = NULL,   cur_sim_TEMP = NULL,   PRCP_TODAY = NULL,   TEMP_TODAY = NULL,   DATE_TOMORROW = NULL,   k = NULL,   sd_monthly_PRCP = NULL,   sd_monthly_TEMP = NULL,   mean_monthly_PRCP = NULL,   mean_monthly_TEMP = NULL,   k1 = NULL,   count = NULL,   seed = NULL )"},{"path":"/reference/knnDaily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KNN daily sampling — knnDaily","text":"cur_sim_PRCP placeholder cur_sim_TEMP placeholder PRCP_TODAY placeholder TEMP_TODAY placeholder DATE_TOMORROW placeholder k placeholder sd_monthly_PRCP placeholder sd_monthly_TEMP placeholder mean_monthly_PRCP placeholder mean_monthly_TEMP placeholder k1 placeholder count placeholder","code":""},{"path":[]},{"path":"/reference/quantileMapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for perturbing climate statistics using Quantile-Mapping — quantileMapping","title":"Function for perturbing climate statistics using Quantile-Mapping — quantileMapping","text":"Function perturbing climate statistics using Quantile-Mapping","code":""},{"path":"/reference/quantileMapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for perturbing climate statistics using Quantile-Mapping — quantileMapping","text":"","code":"quantileMapping(   value = NULL,   mean.change = NULL,   var.change = NULL,   mon.ts = NULL,   year.ts = NULL )"},{"path":"/reference/quantileMapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for perturbing climate statistics using Quantile-Mapping — quantileMapping","text":"value completed... mean.change placeholder var.change placeholder mon.ts placeholder year.ts placeholder","code":""},{"path":[]},{"path":"/reference/readNetcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read netcdf files — readNetcdf","title":"Read netcdf files — readNetcdf","text":"Wrapper function read files create list object returns list weather data grid, table grid coordinates date series well raw data, dimensions, variables, attributes netcdf file.","code":""},{"path":"/reference/readNetcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read netcdf files — readNetcdf","text":"","code":"readNetcdf(   nc.file = NULL,   leap.days = TRUE,   omit.empty = TRUE,   spatial.ref = \"spatial_ref\" )"},{"path":"/reference/readNetcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read netcdf files — readNetcdf","text":"nc.file name netcdf file read leap.days logical value indicating whether gridded data includes leap days. omit.empty lotical value indicating whether empty cells missing values removed spatial.ref PLACEHOLDER","code":""},{"path":[]},{"path":"/reference/readNetcdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read netcdf files — readNetcdf","text":"","code":"if (FALSE) { output <- readNetcdf(nc.path = system.file('extdata', package = 'gridwegen'),     nc.file = \"ntoum.nc\", nc_dimnames = list(x = \"lon\", y = \"lat\", time = \"time\"),     nc.variables = c(\"precip\", \"temp\", \"temp_min\", \"temp_max\"),     origin_date = as.Date(\"1981-01-01\"),     leap.days = TRUE) }"},{"path":"/reference/resampleDates.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissaggregation function — resampleDates","title":"Dissaggregation function — resampleDates","text":"Dissaggregation function","code":""},{"path":"/reference/resampleDates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissaggregation function — resampleDates","text":"","code":"resampleDates(   PRCP_FINAL_ANNUAL_SIM = NULL,   ANNUAL_PRCP = NULL,   PRCP = NULL,   TEMP = NULL,   START_YEAR_SIM = NULL,   k1 = NULL,   ymax = NULL,   dates.d = NULL,   sim.dates.d = NULL,   YEAR_D = NULL,   month.start = NULL,   kk = NULL,   knn.annual.sample.num = 50,   wet.threshold = 0.3,   extreme.quantile = 0.8,   seed = NULL )"},{"path":"/reference/resampleDates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissaggregation function — resampleDates","text":"PRCP_FINAL_ANNUAL_SIM placeholder ANNUAL_PRCP placeholder PRCP placeholder TEMP placeholder START_YEAR_SIM placeholder k1 placeholder ymax placeholder dates.d placeholder sim.dates.d placeholder YEAR_D placeholder month.start placeholder kk placeholder knn.annual.sample.num placeholder wet.threshold Precipitation threshold (mm) distinguish wet dry days extreme.quantile quantile threshold distinguish extreme wet days","code":""},{"path":[]},{"path":"/reference/waveletAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Wavelet Analysis Function — waveletAnalysis","title":"Wavelet Analysis Function — waveletAnalysis","text":"waveletAnalysis returns wavelet analysis results.","code":""},{"path":"/reference/waveletAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wavelet Analysis Function — waveletAnalysis","text":"","code":"waveletAnalysis(   variable = NULL,   variable.unit = \"mm\",   signif.level = 0.9,   noise.type = \"white\",   plot = FALSE,   output.path = NULL )"},{"path":"/reference/waveletAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wavelet Analysis Function — waveletAnalysis","text":"variable numeric vector time-series variables, example, time-series annual precipitation. variable.unit character string define unit variable. signif.level numeric value set siginificance level wavelet analysis (Default= 0.90). noise.type character string defining type background noise.type. Currently either \"white\" (default) \"red\". plot Draw plot output.path Output path","code":""},{"path":[]},{"path":"/reference/waveletAnalysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wavelet Analysis Function — waveletAnalysis","text":"completed later...","code":""},{"path":"/reference/waveletARIMA.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for Wavelet Autoregressive Modeling (WARM) — waveletARIMA","title":"A function for Wavelet Autoregressive Modeling (WARM) — waveletARIMA","text":"function Wavelet Autoregressive Modeling (WARM)","code":""},{"path":"/reference/waveletARIMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for Wavelet Autoregressive Modeling (WARM) — waveletARIMA","text":"","code":"waveletARIMA(   wavelet.components = NULL,   sim.year.num = NULL,   sim.num = 1000,   seed = NULL )"},{"path":"/reference/waveletARIMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for Wavelet Autoregressive Modeling (WARM) — waveletARIMA","text":"wavelet.components list object, different components corresponding low-frequency signals noise sim.year.num numeric value defining desired length simulated annual time-series sim.num numeric value defining number synthetic series produced.","code":""},{"path":"/reference/waveletARSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample from WARM outputs — waveletARSubset","title":"Resample from WARM outputs — waveletARSubset","text":"Resample WARM outputs","code":""},{"path":"/reference/waveletARSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample from WARM outputs — waveletARSubset","text":"","code":"waveletARSubset(   series.obs = NULL,   series.sim = NULL,   power.obs = NULL,   power.sim = NULL,   power.period = NULL,   power.signif = NULL,   sample.num = 5,   seed = NULL,   save.plots = TRUE,   save.series = TRUE,   verbose = FALSE,   output.path = NULL,   padding = TRUE,   bounds = list(mean = c(0.95, 1.05), sd = c(0.9, 1.1), min = c(0.9, 1.1), max = c(0.9,     1.1), power = c(0.6, 2.25), nonsignif.threshold = 0.9) )"},{"path":"/reference/waveletARSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample from WARM outputs — waveletARSubset","text":"series.obs numeric vector observd time-series values. series.sim numeric matrix, simulated time-series. power.obs numeric vector power spectra observed time-series. power.sim numeric matrix power spectrum simulated time-series. power.period time-series power periods calculated. power.signif time-series power significance. sample.num numeric value define final sample size. seed numeric value define seed resampling. save.plots logical, save plots file. save.series logical write results csv files. verbose logical decide information displayed screen. output.path Output folder path padding placeholder bounds placeholder","code":""},{"path":[]},{"path":"/reference/waveletDecompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for weather generator decomposition — waveletDecompose","title":"Function for weather generator decomposition — waveletDecompose","text":"Function weather generator decomposition","code":""},{"path":"/reference/waveletDecompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for weather generator decomposition — waveletDecompose","text":"","code":"waveletDecompose(   variable = NULL,   signif.periods = NULL,   noise.type = \"white\",   signif.level = 0.9,   plot = TRUE,   output.path = NULL )"},{"path":"/reference/waveletDecompose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for weather generator decomposition — waveletDecompose","text":"variable vector time-series weather variables. signif.periods Significant low-frequency periods original time-series. noise.type logical specifying type background noise. signif.level Significance level wavelet analysis. plot Draw plot output.path Output path","code":""},{"path":[]},{"path":"/reference/waveletPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"A ggplot wrapper for wavelet spectra plot — waveletPlot","title":"A ggplot wrapper for wavelet spectra plot — waveletPlot","text":"ggplot wrapper visualization wavelet spectral analysis","code":""},{"path":"/reference/waveletPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ggplot wrapper for wavelet spectra plot — waveletPlot","text":"","code":"waveletPlot(   power.period = NULL,   power.signif = NULL,   power.obs = NULL,   power.sim = NULL )"},{"path":"/reference/waveletPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ggplot wrapper for wavelet spectra plot — waveletPlot","text":"power.period numeric vector fourier periods wavelet analysis power.signif numeric value set sigicance level spectral analysis power.obs numeric vector observed  global wavelet spectra. power.sim numeric matrix simulated global wavelet spectrum. column independent observation","code":""},{"path":"/reference/waveletPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A ggplot wrapper for wavelet spectra plot — waveletPlot","text":"ggplot2 object","code":""},{"path":"/reference/waveletPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A ggplot wrapper for wavelet spectra plot — waveletPlot","text":"place holder","code":""},{"path":"/reference/writeNetcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Write to netcdf file — writeNetcdf","title":"Write to netcdf file — writeNetcdf","text":"Write netcdf file","code":""},{"path":"/reference/writeNetcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write to netcdf file — writeNetcdf","text":"","code":"writeNetcdf(   data = NULL,   coord.grid = NULL,   output.path = NULL,   origin.date = NULL,   calendar.type = \"noleap\",   nc.template.file = NULL,   nc.compression = 4,   nc.spatial.ref = \"spatial_ref\",   nc.file.prefix = \"clim_change_rlz\",   nc.file.suffix = \"\" )"},{"path":"/reference/writeNetcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write to netcdf file — writeNetcdf","text":"data placeholder coord.grid placeholder output.path Placeholder origin.date Placeholder calendar.type Placeholder nc.template.file placeholder nc.compression Placeholder nc.spatial.ref placeholder nc.file.prefix placeholder nc.file.suffix placeholder","code":""},{"path":[]}]
